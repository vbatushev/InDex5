var indexver = "6.0.1";

// Языковые параметры
var docAlertText = "Not open documents. Open document \nand run script again.",
    docAlertHead = "Error: not open documents",
    docOpenDialogHead = "Select file with data for index";


var IndexFinder = (function () {
    var props;

    var main = function (props) {
        app.findGrepPreferences = null;
        app.changeGrepPreferences = null;

        var parentObject = props.docIndex;
        for (var i = 0; i < props.finds.length; i++) {

            var caseSensPrefix = "";
            if (!props.isCaseSens) caseSensPrefix = "(?i)";

            var findStrings = trim(props.finds[i]);

            var findParts = findStrings.split('=>'),
                topicName = findStrings,
                findString = findStrings;

            if (findParts.length > 1) {
                topicName = findParts[0];
                findString = findParts[1];
            }

            findString = caseSensPrefix + findString;

            var topic;
            if (parentObject.topics.itemByName(topicName).isValid) {
                topic = parentObject.topics.itemByName(topicName);
                clearReferences(topic);
            } else {
                topic = parentObject.topics.add(topicName);
            }

            if (i == props.finds.length - 1) {
                app.findGrepPreferences.findWhat = findString;
                processFind(props.obj.findGrep(true), topic);
            }
            parentObject = topic;
        }

        function processFind(finds, topic) {
            app.findGrepPreferences = null;
            app.changeGrepPreferences = null;
            if (!finds.length) return;
            for (var a = 0; a < finds.length; a++) {
                var current = finds[a];

                var test = false;
                if (props.paraStyles.length == 0) {
                    test = true;
                    for (var i = 0; i < props.charStyles.length; i++) {
                        test = current.appliedCharacterStyle == props.charStyles[i];
                    }
                } else {
                    for (var i = 0; i < props.paraStyles.length; i++) {
                        test = current.appliedParagraphStyle == props.paraStyles[i];
                        if (test) {
                            for (var j = 0; j < props.charStyles.length; j++) {
                                test = current.appliedCharacterStyle == props.charStyles[j];
                            }
                        }
                    }
                }

                if (test) {
                    topic.pageReferences.add(current, PageReferenceType.currentPage);
                }
            }
        }
    }

    function trim(str, charlist) {
        var whitespace, l = 0,
            i = 0;
        str += '';
        if (!charlist) {
            whitespace = " \n\r\t\f\x0b\xa0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000";
        } else {
            charlist += '';
            whitespace = charlist.replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g, '$1');
        }
        l = str.length;
        for (i = 0; i < l; i++) {
            if (whitespace.indexOf(str.charAt(i)) === -1) {
                str = str.substring(i);
                break;
            }
        }
        l = str.length;
        for (i = l - 1; i >= 0; i--) {
            if (whitespace.indexOf(str.charAt(i)) === -1) {
                str = str.substring(0, i + 1);
                break;
            }
        }
        return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';
    }

    function clearReferences(topic) {
        for (var p = topic.pageReferences.length; p > -1; p--) {
            var pageRef = topic.pageReferences.item(p);
            if (pageRef.isValid) pageRef.remove();
        }
    }

    var getLineCounts = function(f) {
        var result = 0;
        f.open('r');
        do {
            var str = f.readln();
            if (str.substr(0,2) != '##') {
                if (str.indexOf("=>") > -1) result++;
            }
        } while(f.eof == false);
        f.close();
        return result;
    }

    var clearIndex = function(doc) {
        for (var i = 0, l = doc.indexes.length; i < l; i++) {
            var iIndex = doc.indexes[i];
            for (var s = iIndex.indexSections.length - 1; s > -1; s--) {
                var section = iIndex.indexSections.item(s);
                for (var t = section.allTopics.length - 1; t > -1; t--) {
                    var topic = section.allTopics[t];
                    for (var p = topic.pageReferences.length; p > -1; p--) {
                        var pageRef = topic.pageReferences.item(p);
                        if (pageRef.isValid) pageRef.remove();
                    }
                }
            }
            iIndex.removeUnusedTopics();
        }
    }

    var run = function(props) {
        app.findChangeGrepOptions.includeFootnotes = props.footnotes;
        app.findChangeGrepOptions.includeHiddenLayers = props.hiddenLayers;
        app.findChangeGrepOptions.includeMasterPages = props.masterPages;
        app.findChangeGrepOptions.includeLockedLayersForFind = props.lockedLayers;
        app.findChangeGrepOptions.includeLockedStoriesForFind = props.lockedStories;

        var maxvalue = getLineCounts(props.workFile) * props.workObjects.length,
            progress = new ProgressbarClass(maxvalue, "Process index strings", "InDex " + indexver, false);

        progress.increase();
        for (var i = 0, l = props.workObjects.length; i < l; i++) {
            var wObject = props.workObjects[i];
            props.workFile.open('r');
            do {
                var cstr = props.workFile.readln();
                if (cstr.substr(0,2) != '##') {
                    var el = cstr.split('->');
                    if (el.length > 0) {
                        progress.setLabel("Process " + cstr + "...");
                        main({
                            obj: wObject,
                            finds: el,
                            docIndex: props.workIndex,
                            paraStyles: props.paragaphStyles,
                            charStyles: props.characterStyles,
                            isCaseSens: props.isCaseSens
                        });
                        progress.increase();
                    }
                }
            } while(props.workFile.eof == false);
            props.workFile.close();
        }
        progress.close();
    }

    return {
        execute: main,
        lineCounts: getLineCounts,
        clearIndex: clearIndex,
        run: run
    }
})();

/**
    * Класс индикатора выполнения
    * @param {Number} maxValue             Максимальное значение индикатора
    * @param {String} barLabel             Текст над индикатором
    * @param {String} panelTitle           Заголовок панели
    * @param {String} Info                 Текст под индикатором
    *
    * @method close()                      Закрывает окно индикатора выполнения
    * @method reset(maxValue, barLabel)    Новые значения для максимума и текста над индикатором
    * @method setVal(barValue)             Устанавливает конкретное значение индикатора
    * @method increase()                   Увеличивает значение индикатора на единицу
    * @method setLabel(str)                Устанавливает новое значение текста над индикатором
    * @method setPanelLabel(str)           Устанавливает новое значение заголовка панели
    * @method setInfo(str)                 Устанавливает новое значение текста под индикатором
    */

function ProgressbarClass (maxValue, barLabel, panelTitle, viewInfo) {
    var panelTitle = panelTitle || Locales.ProgressBar.panelTitle;
    var viewInfo = viewInfo || false;
    var Info = "";

    var win = new Window("palette", "", undefined, { closeButton:true, maximizeButton:false, minimizeButton:false, resizeable:false, borderless: false});
    this.windowRef = win;

    if (viewInfo) {
        win.pnl = win.add("panel", [10, 10, 440, 210], panelTitle);
        win.pnl.progBarLabel = win.pnl.add("statictext", [20, 15, 405, 30], barLabel);
        win.pnl.progBar = win.pnl.add("progressbar", [20, 35, 405, 60], 0, maxValue);
        win.pnl.log = win.pnl.add("panel", [20, 65, 405, 175], "");
        win.pnl.log.info = win.pnl.log.add("statictext", [5, 5, 385, 150], Info, {multiline: true, scrolling: false});
        win.pnl.log.info.visible = true;
    } else {
        win.pnl = win.add("panel", [10, 10, 440, 100], panelTitle);
        win.pnl.progBarLabel = win.pnl.add("statictext", [20, 15, 405, 30], barLabel);
        win.pnl.progBar = win.pnl.add("progressbar", [20, 35, 405, 60], 0, maxValue);
    }

    win.cancelBtn  = win.add("button", [0, 0, 0, 0], "Отменить");
    win.cancelBtn.visible = true;
    win.cancelElement = win.cancelBtn ;
    this.terminated = false;

    win.onCancel = function() {
        this.isDone = true;
        return true;
    }

    win.center();
    win.show();

    this.close = function() {
        win.close();
    };
    this.reset = function (maxValue, barLabel) {
        this.windowRef.pnl.progBar.maxvalue = maxValue;
        this.windowRef.pnl.progBar.value = 0;
        this.windowRef.pnl.progBarLabel.text = barLabel;
    };
    this.setVal = function (barValue) { this.windowRef.pnl.progBar.value = barValue; };
    this.increase = function () { this.windowRef.pnl.progBar.value++; };
    this.setLabel = function (str) { this.windowRef.pnl.progBarLabel.text = str; };
    this.setPanelLabel = function (str) { this.windowRef.pnl.text = str; };
    this.setInfo = function (str) {
        this.windowRef.pnl.log.info.text = str;
    };
}
